<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<meta name="GENERATOR" content="Microsoft&reg; HTML Help Workshop 4.1">
<Title>2.4.11</Title>
</HEAD>
<BODY>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm">超类为<SPAN lang=EN-US>TreeListUI，从ListUI继承。在超类基础上，增加了一个KDTree，以管理层次数据。除支持在KDTable中展现数据的编辑外（该能力从ListUI继承），还支持Tree本身的编辑（典型如地址簿分类的编辑）。</SPAN></P>
<H4 style="MARGIN: 14pt 0cm 14.5pt"><SPAN style="FONT-FAMILY: 黑体; mso-ascii-font-family: Arial">类方法介绍</SPAN></H4>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm">层次数据序时簿类<SPAN lang=EN-US>UI从com.kingdee.eas.framework.client.TreeListUI继承。通过BOS Studio完成UI对象的创建、更改继承Query对象的类型以及处理控件绑定等。KDTree上每个节点的类型为KDTreeNode类型。</SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm"><SPAN lang=EN-US>&nbsp;<?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm">必须重载的<SPAN lang=EN-US>abstract方法：</SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l8 level1 lfo9; tab-stops: list 42.0pt"><SPAN lang=EN-US>1.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: #7f0055; mso-font-kerning: 0pt; mso-highlight: white">protected</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white"> <B><SPAN style="COLOR: #7f0055">abstract</SPAN></B> <SPAN style="COLOR: black">String</SPAN> <SPAN style="COLOR: black">getQueryFieldName()</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">：</SPAN><SPAN style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white">点击树上节点时形成过滤条件时的字段，例如地址簿序时簿界面右边的地址列表要依据左边<SPAN lang=EN-US>Tree上选中的地址分类而刷新，此处则返回Address.class</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; mso-font-kerning: 0pt">即可。</SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l8 level1 lfo9; tab-stops: list 42.0pt"><SPAN lang=EN-US>2.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: #7f0055; mso-font-kerning: 0pt; mso-highlight: white">protected</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white"> <B><SPAN style="COLOR: #7f0055">abstract</SPAN></B> <SPAN style="COLOR: black">ITreeBase</SPAN> <SPAN style="COLOR: black">getTreeInterface()</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">：</SPAN><SPAN style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white">获取层次数据实体的业务接口，以便调用业务</SPAN><SPAN style="FONT-SIZE: 10pt; mso-font-kerning: 0pt">方法。要求实体必须从<SPAN lang=EN-US>TreeBase及其子类派生。<BR style="mso-special-character: line-break"><BR style="mso-special-character: line-break"></SPAN></SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm">可选的方法：</P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l11 level1 lfo10; tab-stops: list 42.0pt"><SPAN lang=EN-US>1.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: #7f0055; mso-font-kerning: 0pt; mso-highlight: white">protected</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white"> <B><SPAN style="COLOR: #7f0055">void</SPAN></B> <SPAN style="COLOR: black">buildTreeFilter()</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">：</SPAN><SPAN style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white">构造查询子节点数据的过滤条件</SPAN><SPAN style="FONT-SIZE: 10pt; mso-font-kerning: 0pt">。在<SPAN lang=EN-US>TreeListUI中默认<SPAN style="BACKGROUND: white; mso-highlight: white">实现为在EntityViewInfo中添加一个getQueryFieldName()=treeNodeInfo的过滤条件</SPAN>，即查询对象的某个属性关联到Tree节点所代表的对象。超类认为这种查询条件是是最常见的情况，例如地址簿对象有一个属性指向关联的地址簿分组对象。该默认实现依赖于getQueryFieldName纯虚方法。如果你需要构造的查询条件不是这种形式，则需要重载本方法自行设定过滤条件。</SPAN></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt">示例：<SPAN lang=EN-US><o:p></o:p></SPAN></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt">protected void buildTreeFilter()<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt">{<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp; </SPAN>KDTreeNode treeNode = (KDTreeNode)treeMain.getLastSelectedPathComponent();<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp; </SPAN>AddressClassInfo info = (AddressClassInfo)treeNode.getUserObject();<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt">&nbsp;<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp; </SPAN>// 清空并加入自己的过滤条件（通讯地址包含被选中地址簿分类的名称=&gt;仅示意而已）<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp; </SPAN>FilterItemCollection items = mainQuery.getFilter().getFilterItems();<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt">items.clear();<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt">items().add(new FilterItemInfo ("postalAddress",info.getClassName(),CompareType.LIKE))<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt">}<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l11 level1 lfo10; tab-stops: list 42.0pt"><SPAN lang=EN-US>2.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: #7f0055; mso-font-kerning: 0pt; mso-highlight: white">protected</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white"> <SPAN style="COLOR: black">String</SPAN> <SPAN style="COLOR: black">getGroupEditUIName()</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">：指示<SPAN lang=EN-US>Tree</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white">关联的类别编辑<SPAN lang=EN-US>UI对象名，如果界面需要实现类别编辑，则需要重载该方法</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; mso-font-kerning: 0pt">。</SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l11 level1 lfo10; tab-stops: list 42.0pt"><SPAN lang=EN-US>3.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: #7f0055; mso-font-kerning: 0pt; mso-highlight: white">protected</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white"> <SPAN style="COLOR: black">String</SPAN> <SPAN style="COLOR: black">getGroupEditUIModal()</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">：与<SPAN lang=EN-US>ListUI类似，表示产生类别编辑UI的方式。</SPAN></SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l11 level1 lfo10; tab-stops: list 42.0pt"><SPAN lang=EN-US>4.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: #7f0055; mso-font-kerning: 0pt; mso-highlight: white">protected</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white"> <B><SPAN style="COLOR: #7f0055">void</SPAN></B> <SPAN style="COLOR: black">prepareGroupUIContext(UIContext</SPAN> <SPAN style="COLOR: black">uiContext,</SPAN> <SPAN style="COLOR: black">ActionEvent</SPAN> <SPAN style="COLOR: black">e)</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">：类似于<SPAN lang=EN-US>ListUI对关联EditUI的处理方式，</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white">允许构造传递给<SPAN lang=EN-US>GroupEditUI的UIContext</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; mso-font-kerning: 0pt">。超类默认对于<SPAN style="BACKGROUND: white; mso-highlight: white">新增类别，传入了当前选中的节点</SPAN>对象（默认为是新增节点的<SPAN style="BACKGROUND: white; mso-highlight: white">父节点</SPAN>，通过<SPAN lang=EN-US>UIContext.PARENTNODE传递）。</SPAN></SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l11 level1 lfo10; tab-stops: list 42.0pt"><SPAN lang=EN-US>5.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: #7f0055; mso-font-kerning: 0pt; mso-highlight: white">protected</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white"> <SPAN style="COLOR: black">String</SPAN> <SPAN style="COLOR: black">getRootName()</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">：</SPAN><SPAN style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white">定义一个虚拟根节点的显示名称，默认返回<SPAN lang=EN-US>null，即不需要虚拟根节点。此时，所有节点都依据实际的数据</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; mso-font-kerning: 0pt">构造，可能会有多个一级节点。<SPAN style="BACKGROUND: white; mso-highlight: white">继承类可以重载，定义虚拟根结点</SPAN>。</SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">示例（地址簿序时簿需要定义一个虚的根节点）：<SPAN lang=EN-US><o:p></o:p></SPAN></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">protected String getRootName()<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">{<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt"><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp; </SPAN>return "地址分类";<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">}</SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l11 level1 lfo10; tab-stops: list 42.0pt"><SPAN lang=EN-US>6.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: #7f0055; mso-font-kerning: 0pt; mso-highlight: white">protected</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white"> <B><SPAN style="COLOR: #7f0055">void</SPAN></B> <SPAN style="COLOR: black">initTree()</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">：初始化构造<SPAN lang=EN-US>Tree。</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: blue; mso-font-kerning: 0pt">一般情况下请不要重载这个方法，除非你决定用自己的<SPAN lang=EN-US>ITreeBuilder接口的实现类替换掉超类默认提供的LNTreeBuilder</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">。</SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l11 level1 lfo10; tab-stops: list 42.0pt"><SPAN lang=EN-US>7.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: #7f0055; mso-font-kerning: 0pt; mso-highlight: white">protected</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white"> <SPAN style="COLOR: black">ILNTreeNodeCtrl</SPAN> <SPAN style="COLOR: black">getLNTreeNodeCtrl()</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">：返回与<SPAN lang=EN-US>LNTreeBuilder配合使用的ILNTreeNodeCtrl实现类。超类提供默认的实现类</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt">DefaultLNTreeNodeCtrl。在</SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-bidi-font-family: 宋体">特定情况下需要重载</SPAN><SPAN style="FONT-SIZE: 10pt; mso-bidi-font-family: 宋体">，<SPAN style="BACKGROUND: white; mso-highlight: white">例如菜单树需要根据权限进行过滤</SPAN>而不是仅根据<SPAN lang=EN-US>longnumber过滤时。</SPAN></SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l11 level1 lfo10; tab-stops: list 42.0pt"><SPAN lang=EN-US>8.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><B><SPAN lang=EN-US style="COLOR: maroon">protected</SPAN></B><SPAN lang=EN-US> boolean isMoveTree() 是否要确认进行节点移动。</SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>//如果需要对话框提示，请重载，默认不需要。</SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>protected boolean isMoveTree()</SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>{</SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US><SPAN style="mso-spacerun: yes">&nbsp;</SPAN><SPAN style="mso-tab-count: 1">&nbsp;&nbsp;&nbsp; </SPAN>return true;</SPAN></P>
<P class=MsoNormalIndent style="BACKGROUND: #e0e0e0; MARGIN: 1pt 0cm 1pt 21pt; TEXT-INDENT: 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>}</SPAN></P>
<H4 style="MARGIN: 14pt 0cm 14.5pt"><SPAN style="FONT-FAMILY: 黑体; mso-ascii-font-family: Arial">常见问题</SPAN></H4>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 39pt; TEXT-INDENT: -18pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l12 level1 lfo11; tab-stops: list 39.0pt"><SPAN lang=EN-US>1.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN>问：如何启用<SPAN lang=EN-US>TreeListUI对Tree分组的编辑能力？<BR>答：首先将分组编辑相关的按钮Visible属性设置为true，然后重载getGroupEditUIName方法指示关联的编辑UI对象名。</SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 39pt; TEXT-INDENT: -18pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l12 level1 lfo11; tab-stops: list 39.0pt"><SPAN lang=EN-US>2.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN>问：如何获得选中节点？如何获得选中节点的主键值？<SPAN lang=EN-US><BR>答：使用getSelectedNode获得选中节点所对应的对象。为方便获取主键值，提供了getSelectedNodeKeyValue方法。</SPAN></P>
<H4 style="MARGIN: 14pt 0cm 14.5pt"><SPAN lang=EN-US><FONT face=Arial>Tree</FONT></SPAN><SPAN style="FONT-FAMILY: 黑体; mso-ascii-font-family: Arial">的构造机制及如何扩展？</SPAN></H4>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm">树的构造由<SPAN lang=EN-US>ITreeBuidler接口定义。</SPAN><SPAN style="mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">主要的方法是<SPAN style="COLOR: #3f7f5f">：</SPAN></SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l2 level1 lfo13; tab-stops: list 42.0pt"><SPAN lang=EN-US style="FONT-FAMILY: Wingdings">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: #7f0055; mso-font-kerning: 0pt; mso-highlight: white">public</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white"> <SPAN style="COLOR: black">JTree</SPAN> <SPAN style="COLOR: black">buildTree(JTree</SPAN> <SPAN style="COLOR: black">tree)</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">：</SPAN><SPAN style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white">构建树</SPAN><SPAN style="FONT-SIZE: 10pt; mso-font-kerning: 0pt">，<SPAN style="BACKGROUND: white; mso-highlight: white">若传入<SPAN lang=EN-US>tree为null，则新建树。</SPAN></SPAN></SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l2 level1 lfo13; tab-stops: list 42.0pt"><SPAN lang=EN-US style="FONT-FAMILY: Wingdings">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: #7f0055; mso-font-kerning: 0pt; mso-highlight: white">public</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white"> <B><SPAN style="COLOR: #7f0055">void</SPAN></B> <SPAN style="COLOR: black">refreshTreeNode(KDTreeNode</SPAN> <SPAN style="COLOR: black">treeNode)</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">：重新取数，刷新节点。</SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US>&nbsp;<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm">针对<SPAN lang=EN-US>EAS处理层次数据采用长编码（longnumber）的情况，应用框架提供了LNTreeBuilder这个特定实现类。与此配合，又定义了</SPAN><SPAN lang=EN-US style="BACKGROUND: white; COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt; mso-highlight: white">ILNTreeNodeCtrl</SPAN><SPAN style="COLOR: black; mso-bidi-font-size: 10.0pt; mso-font-kerning: 0pt">接口和该接口的实现类</SPAN><SPAN lang=EN-US>DefaultLNTreeNodeCtrl。</SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l13 level1 lfo14; tab-stops: list 42.0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt">1.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt">LNTreeBuilder：实现ITreeBuilder接口，提供树的构建能力。<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l13 level1 lfo14; tab-stops: list 42.0pt"><SPAN lang=EN-US>2.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: black; mso-font-kerning: 0pt; mso-highlight: white">ILNTreeNodeCtrl</SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">接口：</SPAN><SPAN style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white">根据父结点信息，获取指定层次子孙结点信息</SPAN>。<SPAN style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt">主要的方法是：</SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 63pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l9 level1 lfo12; tab-stops: list 63.0pt"><SPAN lang=EN-US style="FONT-FAMILY: Wingdings">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; COLOR: #7f0055; mso-font-kerning: 0pt; mso-highlight: white">public</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white"> <SPAN style="COLOR: black">AbstractObjectCollection</SPAN> <SPAN style="COLOR: black">getChildren(TreeBaseInfo</SPAN> <SPAN style="COLOR: black">parentNodeInfo,</SPAN> <B><SPAN style="COLOR: #7f0055">int</SPAN></B> <SPAN style="COLOR: black">level)</SPAN></SPAN><SPAN style="FONT-SIZE: 10pt; COLOR: black; mso-font-kerning: 0pt">：</SPAN><SPAN style="FONT-SIZE: 10pt; BACKGROUND: white; mso-font-kerning: 0pt; mso-highlight: white">获取指定结点的指定级次的子孙结点</SPAN><SPAN style="FONT-SIZE: 10pt; mso-font-kerning: 0pt">。<SPAN style="BACKGROUND: white; mso-highlight: white">若<SPAN lang=EN-US>parent==null，则获取从1到指定级次的结点。</SPAN></SPAN></SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm 1pt 42pt; TEXT-INDENT: -21pt; mso-char-indent-count: 0; mso-char-indent-size: 0cm; mso-list: l13 level1 lfo14; tab-stops: list 42.0pt"><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt">3.<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt">DefaultLNTreeNodeCtrl：实现ILNTreeNodeCtrl接口，完成根据longnumber获取下级节点数据的能力。<o:p></o:p></SPAN></P>
<P class=MsoNormalIndent style="MARGIN: 1pt 0cm; mso-char-indent-count: 0; mso-char-indent-size: 0cm"><SPAN lang=EN-US style="FONT-SIZE: 10pt; mso-bidi-font-size: 9.0pt">&nbsp;<o:p></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN style="FONT-FAMILY: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">如果有不基于</SPAN><SPAN lang=EN-US><FONT face="Times New Roman">longnumber</FONT></SPAN><SPAN style="FONT-FAMILY: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">方式的层次数据，可通过实现</SPAN><SPAN lang=EN-US><FONT face="Times New Roman">ITreeBuilder</FONT></SPAN><SPAN style="FONT-FAMILY: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">接口予以扩展。</SPAN></P>

</BODY>
</HTML>
